{"version":3,"sources":["TestDemo/TestDemo.js","App.js","serviceWorker.js","index.js"],"names":["stack","ChildOne","props","defaultProps","count","sum","callbackFunc","useState","setCount","useEffect","TestDemo","setSum","memoizedCallback","useCallback","push","console","log","length","map","item","key","Math","random","onClick","App","state","content","list","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAIMA,EAAQ,GAiBd,SAASC,EAASC,GACdD,EAASE,aAAe,CACpBC,MAAO,EACPC,IAAK,EACLC,aAAc,cAJG,MAaKC,oBAAS,kBAAML,EAAMI,kBAb1B,mBAadF,EAbc,KAaPI,EAbO,KAmBrB,OAJAC,qBAAU,WACND,EAASN,EAAMI,kBAChB,CAACF,IAGA,6BACI,4BAAKA,IA8DFM,MAzDf,SAAkBR,GAAO,MAECK,mBAAS,GAFV,mBAEdF,EAFc,KAETM,EAFS,KAKfC,EAAmBC,uBACrB,SAAAR,GAGI,OAFAL,EAAMc,KAAKF,GACXG,QAAQC,IAAIhB,EAAMiB,QACXZ,IAEX,CAACA,IAyBL,OACI,6BACI,kBAACJ,EAAD,CACIK,aAAcM,IApCV,CAAC,EAAG,EAAG,GAuCHM,KAAI,SAACC,GAAD,OAEJ,4BACIC,IAAKC,KAAKC,SACVC,QAAS,WAzB7BZ,EAyB+CQ,KAE1BA,QC/CdK,E,kDA1CX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDuB,MAAQ,CACTrB,MAAO,EACPsB,QAAS,CAAC,EAAG,EAAG,GAChBC,KAAM,CAAC,CAEHD,QAAS,kCAEV,CAECA,QAAS,kCAEV,CAECA,QAAS,kCAEV,CAECA,QAAS,kCAEV,CAECA,QAAS,kCAEV,CAECA,QAAS,oCA3BF,E,qDAkCf,OACI,6BACI,kBAAC,EAAD,W,GArCEE,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.6be8f506.chunk.js","sourcesContent":["\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nconst stack = [];\n// function reducer(state, action) {\n//     console.log(state.count, state.sum);\n//     switch (action.type) {\n//         case 'add':\n//             return {\n//                 count: state.count + 1,\n//                 sum: state.sum\n//             };\n//         case 'decrease':\n//             return { count: state.count - 1 };\n//         case 'sum':\n//             return { sum: state.sum + 2 };\n//         default:\n//             throw new Error();\n//     }\n// }\nfunction ChildOne(props) {\n    ChildOne.defaultProps = {\n        count: 0,\n        sum: 0,\n        callbackFunc: () => {}\n    };\n\n    ChildOne.propTypes = {\n        count: PropTypes.number,\n        sum: PropTypes.number,\n        callbackFunc: PropTypes.func\n    };\n\n    const [count, setCount] = useState(() => props.callbackFunc());\n\n    useEffect(() => {\n        setCount(props.callbackFunc());\n    }, [count]);\n\n    return (\n        <div>\n            <h2>{count}</h2>\n        </div>\n    );\n}\n\nfunction TestDemo(props) {\n    // const [count, setCount] = useState(0);\n    const [sum, setSum] = useState(0);\n    const content = [1, 2, 3];\n\n    const memoizedCallback = useCallback(\n        sum => {\n            stack.push(memoizedCallback);\n            console.log(stack.length);\n            return sum;\n        },\n        [sum]\n    );\n\n    // const nonMemoizedCallback = () => {\n    //     stack.push(nonMemoizedCallback);\n    //     console.log(stack.length);\n    //     return sum;\n    // };\n\n    const handleClick = value => {\n        setSum(value);\n    };\n\n    // TestDemo.defaultProps = {\n    //     count: 0,\n    //     content: '',\n    //     handleClick: () => {}\n    // };\n    //\n    // TestDemo.propTypes = {\n    //     count: PropTypes.number,\n    //     content: PropTypes.string,\n    //     handleClick: PropTypes.object\n    // };\n    // const [state, dispatch] = useReducer(reducer, initalValue);\n    return (\n        <div>\n            <ChildOne\n                callbackFunc={memoizedCallback}\n            />\n            {\n                content.map((item) =>\n                    (\n                        <button\n                            key={Math.random()}\n                            onClick={() => handleClick(item)}\n                        >\n                            {item}\n                        </button>\n                    )\n                )\n            }\n        </div>\n    );\n}\n\nexport default TestDemo;\n","import React, { Component } from 'react';\nimport './App.css';\n// import MoreList from './MoreList/MoreList';\nimport TestDemo from './TestDemo/TestDemo';\n// import ClassComp from './ClassComp/ClassComp';\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            content: [1, 2, 3],\n            list: [{\n                // checked: false,\n                content: '抽到妖刀姬',\n                // isComplete: false\n            }, {\n                // checked: true,\n                content: '抽到青行灯',\n                // isComplete: true\n            }, {\n                // checked: false,\n                content: '抽到不知火',\n                // isComplete: false\n            }, {\n                // checked: false,\n                content: '抽到妖刀姬',\n                // isComplete: false\n            }, {\n                // checked: true,\n                content: '抽到青行灯',\n                // isComplete: true\n            }, {\n                // checked: false,\n                content: '抽到不知火',\n                // isComplete: false\n            }]\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <TestDemo />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}